 
within MPC_Motor.Interfaces;
partial model PartialInverter
  Modelica.Electrical.MultiPhase.Interfaces.PositivePlug Plug_p annotation(
    Placement(visible = true, transformation(origin = {87, 1}, extent = {{-35, -31}, {35, 31}}, rotation = 0), iconTransformation(origin = {117, 15}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
  Modelica.Electrical.Analog.Interfaces.PositivePin DC_In annotation(
    Placement(visible = true, transformation(origin = {-114, 46}, extent = {{-32, -32}, {32, 32}}, rotation = 0), iconTransformation(origin = {-115, 47}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
  Modelica.Electrical.Analog.Interfaces.PositivePin DC_Out annotation(
    Placement(visible = true, transformation(origin = {-114, -14}, extent = {{-32, -32}, {32, 32}}, rotation = 0), iconTransformation(origin = {-115, -15}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
  input Modelica.Blocks.Interfaces.RealInput Sa "Connector of Real output signal" annotation(
    Placement(visible = true, transformation(origin = {-50, 112}, extent = {{-10, -10}, {10, 10}}, rotation = -90), iconTransformation(origin = {-60, 110}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  input Modelica.Blocks.Interfaces.RealInput Sb "Connector of Real output signal" annotation(
    Placement(visible = true, transformation(origin = {-6, 112}, extent = {{-10, -10}, {10, 10}}, rotation = -90), iconTransformation(origin = {0, 110}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  input Modelica.Blocks.Interfaces.RealInput Sc "Connector of Real output signal" annotation(
    Placement(visible = true, transformation(origin = {35, 111}, extent = {{-11, -11}, {11, 11}}, rotation = -90), iconTransformation(origin = {60, 110}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
equation

  annotation(
    Diagram(graphics = {Text(origin = {-87, 48}, lineColor = {85, 0, 255}, extent = {{-11, 14}, {11, -14}}, textString = "+"), Text(origin = {-87, -16}, lineColor = {85, 0, 255}, extent = {{-11, 14}, {11, -14}}, textString = "-")}),
    Icon(graphics = {Text(origin = {-87, -16}, lineColor = {85, 0, 255}, extent = {{-11, 14}, {11, -14}}, textString = "-"), Bitmap(origin = {47, 11}, rotation = 180, extent = {{-31, 41}, {31, -41}}, imageSource = "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"), Rectangle(lineColor = {85, 0, 255}, lineThickness = 0.75, extent = {{-100, 100}, {100, -100}}), Text(origin = {-8, -63}, lineColor = {85, 85, 255}, extent = {{-56, 13}, {56, -13}}, textString = "TwoLevelVSI"), Text(origin = {-87, 48}, lineColor = {85, 0, 255}, extent = {{-11, 14}, {11, -14}}, textString = "+"), Line(origin = {-1, 14}, points = {{-93, 80}, {93, -80}, {93, -80}}, color = {0, 0, 255})}));
end PartialInverter;
